version: '3.8'

services:
  # PostgreSQL database for Temporal
  temporal-postgres:
    image: postgres:15-alpine
    container_name: temporal-postgres
    environment:
      POSTGRES_PASSWORD: temporal
      POSTGRES_USER: temporal
      POSTGRES_DB: temporal
    volumes:
      - temporal-postgres-data:/var/lib/postgresql/data
    networks:
      - cms-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U temporal"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Temporal server with auto-setup
  temporal:
    image: temporalio/auto-setup:1.23.0
    container_name: temporal
    depends_on:
      temporal-postgres:
        condition: service_healthy
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=temporal
      - POSTGRES_PWD=temporal
      - POSTGRES_SEEDS=temporal-postgres
    ports:
      - "7233:7233"
    networks:
      - cms-network
    healthcheck:
      test: ["CMD", "tctl", "--address", "temporal:7233", "cluster", "health"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  # Temporal UI
  temporal-ui:
    image: temporalio/ui:latest
    container_name: temporal-ui
    depends_on:
      temporal:
        condition: service_healthy
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CORS_ORIGINS=*
    ports:
      - "8233:8080"
    networks:
      - cms-network
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: backend
    depends_on:
      temporal:
        condition: service_healthy
    volumes:
      - ./backend/.env.production:/app/backend/.env:ro
    ports:
      - "3001:3001"
    networks:
      - cms-network
    restart: unless-stopped

  # Temporal Worker
  worker:
    build:
      context: .
      dockerfile: worker/Dockerfile
    container_name: worker
    depends_on:
      temporal:
        condition: service_healthy
      backend:
        condition: service_started
    volumes:
      - ./worker/.env.production:/app/worker/.env:ro
    networks:
      - cms-network
    restart: unless-stopped

  # Nginx (serves frontend + reverse proxy)
  nginx:
    image: nginx:alpine
    container_name: nginx
    depends_on:
      - backend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./frontend/dist:/usr/share/nginx/html:ro
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - cms-network
    restart: unless-stopped

networks:
  cms-network:
    driver: bridge

volumes:
  temporal-postgres-data:
